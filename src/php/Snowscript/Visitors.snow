fn rpl(string, search, replace)
    <- str_replace(search, replace, string)

fn sjoin(guys, separator=", ")
    return join(array(guys), separator)

fn type(guy)
    <- gettype(guy)

class Snowscript_Visitors_Scope
    extends PHPParser_NodeVisitorAbstract
    fn __construct()
        .empty_scope = {'imports': {}, 'assigns': {}, 'fns': {}}
        .scopes = [.empty_scope]

    fn enterNode(PHPParser_Node node)
        .scope = .scopes[-1]
        if node isa PHPParser_Node_Stmt_Imports
            .add_imports(node)
        elif node isa PHPParser_Node_Expr_Assign
            .scopes[-1]['assigns'][node.var.name] = node
        elif node isa PHPParser_Node_Stmt_Function
            last_scope = .scopes[-1]
            .scopes.append(last_scope.copy())
            .scopes[-1]['fns'][node.name] = node

    fn add_imports(node)
        paths = []
        for import_path in node.import_paths
            paths []= import_path.name
        prefix = paths->sjoin("__")

        for imp in node.imports
            .scopes[0]['imports'][imp.name] = "{prefix}__{imp.name}"

    fn leaveNode(PHPParser_Node node)
        if node isa PHPParser_Node_Stmt_Imports
            <- false
        if node isa PHPParser_Node_Stmt_Function
            .scopes.pop()

        #node->get_class()->var_dump()

    fn afterTraverse(array nodes)
        #array(.scopes)->var_dump()
        <- nodes