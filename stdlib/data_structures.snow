class SnowList 
    implements ArrayAccess, IteratorAggregate, Countable
    arr = 1

    fn __construct(arr)
        .arr = arr

    fn _assert_int(i)
        if i->gettype() != 'integer'
            throw Exception('Index must be an integer, was ' % i->gettype())

    fn _get_index(i)
        ._assert_int(i)
        <- if i < 0 then .arr->count() + i else i

    fn offsetSet(i, x)
        if i == null
            throw Exception('[]= operator not supported. Use .append() instead')
        else
            .offsetGet(i)
            i = ._get_index(i)
            .arr[i] = x

    fn offsetGet(i)
        if not .offsetExists(i)
            throw IndexError('Index does not exist: ' % i)
        i2 = ._get_index(i)
        <- .arr[i2]

    fn offsetExists(i)
        i = ._get_index(i)
        <- isset(.arr[i])

    fn offsetUnset(i)
        .offsetGet(i)   
        i = ._get_index(i)
        unset(.arr[i])

    fn getIterator()
        <- ArrayIterator(.arr)

    fn count()
        <- count(.arr)

    fn slice(a,b)
        if b < 0
            <- SnowList(array_slice(.arr, a, b))
        else
            <- SnowList(array_slice(.arr, a, .count()-b))

    fn append(x)
        .arr []= x
        <- this

    fn pop(i=-1)
        if i == -1
            <- array_pop(.arr)
        else
            .offsetGet(i)
            i = ._get_index(i)
            splice = array_splice(.arr, i)
            <- splice[0]

    fn extend(xs)
        for x in xs
            .append(x)
        <- this

    fn get(i)
        <- .offsetGet(i)

    fn reversed()
        <- SnowList(array_reverse(.arr))

    fn copy()
        <- this->serialize()->unserialize()

class SnowDict 
    implements ArrayAccess, IteratorAggregate, Countable
    arr = 1

    fn __construct(arr)
        .arr = arr

    fn _assert_type(k)
        type = k->gettype()
        if type != 'string' and type != 'integer'
            throw Exception("dict key type invalid: " % type)

    fn offsetSet(k, x)
        ._assert_type(k)
        .arr[k] = x

    fn offsetGet(k)
        ._assert_type(k)
        if not .offsetExists(k)
            throw KeyError('Key does not exist: ' % k)

        <- .arr[k]

    fn offsetExists(k)
        ._assert_type(k)
        <- isset(.arr[k])

    fn offsetUnset(k)
        ._assert_type(k)
        .offsetGet(k)
        unset(.arr[k])

    fn getIterator()
        <- ArrayIterator(.arr)

    fn count()
        <- count(.arr)

    fn &__get(k)
        x = .offsetGet(k)
        <- x

    fn __set(k, x)
      .offsetSet(k, x)

    fn keys()
        <- array_keys(.arr)

    fn get(k, _default=null)
        ._assert_type(k)
        if .offsetExists(k)
            <- .offsetGet(k)
        else
            <- _default

    fn copy()
        <- this->serialize()->unserialize()